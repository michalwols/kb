"use strict";(self.webpackChunkkb=self.webpackChunkkb||[]).push([[9305],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=s(r),d=o,f=u["".concat(p,".").concat(d)]||u[d]||c[d]||i;return r?n.createElement(f,l(l({ref:t},m),{},{components:r})):n.createElement(f,l({ref:t},m))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=u;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9809:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const i={},l="Model Compression",a={unversionedId:"applied-ml/deployment/compression",id:"applied-ml/deployment/compression",title:"Model Compression",description:"- DeepSparse",source:"@site/docs/applied-ml/deployment/compression.md",sourceDirName:"applied-ml/deployment",slug:"/applied-ml/deployment/compression",permalink:"/docs/applied-ml/deployment/compression",draft:!1,editUrl:"https://github.com/michalwols/kb/edit/master/docs/applied-ml/deployment/compression.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Machine Learning Compilers",permalink:"/docs/applied-ml/deployment/compilers"},next:{title:"Mobile Inference",permalink:"/docs/applied-ml/deployment/mobile-inference"}},p={},s=[{value:"Knowledge Distillation",id:"knowledge-distillation",level:2}],m={toc:s};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"model-compression"},"Model Compression"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/neuralmagic/deepsparse"},"DeepSparse"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://neuralmagic.com/blog/benchmark-resnet50-with-deepsparse/?utm_campaign=Social&utm_content=217592900&utm_medium=social&utm_source=twitter&hss_channel=tw-997536616481722369"},"ResNet-50 on CPUs: Sparsifying for Better Performance")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/open-mmlab/mmrazor"},"GitHub - open-mmlab/mmrazor: OpenMMLab Model Compression Toolbox and Benchmark."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/TimDettmers/bitsandbytes"},"GitHub - TimDettmers/bitsandbytes: 8-bit CUDA functions for PyTorch")),(0,o.kt)("h2",{id:"knowledge-distillation"},"Knowledge Distillation"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/cv/distill"},"For Knowledge Distillation see this note")))}c.isMDXComponent=!0}}]);