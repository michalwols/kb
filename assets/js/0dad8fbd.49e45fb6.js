"use strict";(self.webpackChunkkb=self.webpackChunkkb||[]).push([[1041],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>b});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),m=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=m(r),b=o,h=u["".concat(c,".").concat(b)]||u[b]||s[b]||i;return r?n.createElement(h,l(l({ref:t},p),{},{components:r})):n.createElement(h,l({ref:t},p))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=u;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var m=2;m<i;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9080:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>a,toc:()=>m});var n=r(7462),o=(r(7294),r(3905));const i={},l="Mobile Inference and Mobile Models",a={unversionedId:"ml/ops/mobile-inference",id:"ml/ops/mobile-inference",title:"Mobile Inference and Mobile Models",description:"GitHub - open-mmlab/mmdeploy: OpenMMLab Model Deployment Framework",source:"@site/docs/01-ml/ops/mobile-inference.md",sourceDirName:"01-ml/ops",slug:"/ml/ops/mobile-inference",permalink:"/docs/ml/ops/mobile-inference",draft:!1,editUrl:"https://github.com/michalwols/kb/edit/master/docs/01-ml/ops/mobile-inference.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Model Compression",permalink:"/docs/ml/ops/compression"},next:{title:"Server Inference",permalink:"/docs/ml/ops/server-inference"}},c={},m=[{value:"Pytorch",id:"pytorch",level:2},{value:"Selective Builds",id:"selective-builds",level:3},{value:"PlayTorch",id:"playtorch",level:3},{value:"CoreML",id:"coreml",level:3},{value:"OnnxRuntime",id:"onnxruntime",level:3},{value:"Mobile Models",id:"mobile-models",level:2}],p={toc:m};function s(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mobile-inference-and-mobile-models"},"Mobile Inference and Mobile Models"),(0,o.kt)("p",null,"#ml/mobile"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/open-mmlab/mmdeploy"},"GitHub - open-mmlab/mmdeploy: OpenMMLab Model Deployment Framework"),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/d2go/tree/main/d2go/export"},"d2go/d2go/export at main \xb7 facebookresearch/d2go \xb7 GitHub")),(0,o.kt)("h2",{id:"pytorch"},"Pytorch"),(0,o.kt)("h3",{id:"selective-builds"},"Selective Builds"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pytorch.org/blog/pytorchs-tracing-based-selective-build/?utm_source=twitter&utm_medium=organic_social&utm_campaign=evergreen"},"https://pytorch.org/blog/pytorchs-tracing-based-selective-build/?utm_source=twitter&utm_medium=organic_social&utm_campaign=evergreen")),(0,o.kt)("h3",{id:"playtorch"},"PlayTorch"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebookresearch/playtorch/tree/main/react-native-pytorch-core"},"playtorch/react-native-pytorch-core at main \xb7 facebookresearch/playtorch \xb7 GitHub"))),(0,o.kt)("h3",{id:"coreml"},"CoreML"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/apple/ml-cvnets/blob/main/docs/source/en/general/README-pytorch-to-coreml.md"},"ml-cvnets/README-pytorch-to-coreml.md at main \xb7 apple/ml-cvnets \xb7 GitHub")),(0,o.kt)("h3",{id:"onnxruntime"},"OnnxRuntime"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://onnxruntime.ai/docs/tutorials/mobile/"},"Deploy on mobile | onnxruntime"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://onnxruntime.ai/docs/tutorials/mobile/deploy-android.html"},"Mobile image recognition on Android | onnxruntime")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/onnx/onnxmltools"},"GitHub - onnx/onnxmltools: ONNXMLTools enables conversion of models to ONNX")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://onnxruntime.ai/docs/tutorials/mobile/helpers/model-usability-checker.html"},"Model Usability Checker | onnxruntime")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://devblogs.microsoft.com/surface-duo/onnx-machine-learning-3/"},"Bringing ONNX models to Android - Surface Duo Blog"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"mobile-models"},"Mobile Models"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/apple/ml-mobileone"},'GitHub - apple/ml-mobileone: This repository contains the official implementation of the research paper, "An Improved One millisecond Mobile Backbone".'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/federicopozzi33/MobileOne-PyTorch"},"GitHub - federicopozzi33/MobileOne-PyTorch: A PyTorch implementation of MobileOne")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://mmclassification.readthedocs.io/en/1.x/papers/mobileone.html"},"MobileOne \u2014 MMClassification 1.0.0rc5 documentation")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://mmclassification.readthedocs.io/en/1.x/papers/mobilevit.html"},"MobileVit \u2014 MMClassification 1.0.0rc5 documentation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/zhangzjn/EMO"},'GitHub - zhangzjn/EMO: Official PyTorch implementation of "Rethinking Mobile Block for Efficient Neural Models"')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/huawei-noah/Efficient-AI-Backbones"},"GitHub - huawei-noah/Efficient-AI-Backbones: Efficient AI Backbones including GhostNet, TNT and MLP, developed by Huawei Noah's Ark Lab.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Amshaker/SwiftFormer"},"GitHub - Amshaker/SwiftFormer: SwiftFormer: Efficient Additive Attention for Transformer-based Real-time Mobile Vision Applications")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/bytedance/Next-ViT"},"GitHub - bytedance/Next-ViT"))))}s.isMDXComponent=!0}}]);